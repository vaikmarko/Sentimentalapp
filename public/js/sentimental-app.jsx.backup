const { useState, useEffect } = React;

// Lucide icons as inline SVG components since we can't import them directly
const Search = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="11" cy="11" r="8"/>
    <path d="m21 21-4.35-4.35"/>
  </svg>
);

const Heart = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
  </svg>
);

const MessageCircle = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"/>
  </svg>
);

const Sparkles = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .962 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.582a.5.5 0 0 1 0 .962L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.962 0L9.937 15.5z"/>
  </svg>
);

const Plus = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M12 5v14M5 12h14"/>
  </svg>
);

const Brain = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z"/>
    <path d="M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z"/>
    <path d="M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4"/>
    <path d="M17.599 6.5a3 3 0 0 0 .399-1.375"/>
    <path d="M6.003 5.125A3 3 0 0 0 6.401 6.5"/>
    <path d="M3.477 10.896a4 4 0 0 1 .585-.396"/>
    <path d="M19.938 10.5a4 4 0 0 1 .585.396"/>
    <path d="M6 18a4 4 0 0 1-1.967-.516"/>
    <path d="M19.967 17.484A4 4 0 0 1 18 18"/>
  </svg>
);

const Compass = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="12" cy="12" r="10"/>
    <polygon points="16.24,7.76 14.12,14.12 7.76,16.24 9.88,9.88"/>
  </svg>
);

const BookOpen = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/>
    <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/>
  </svg>
);

const ChevronRight = ({ size = 14 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polyline points="9,18 15,12 9,6"/>
  </svg>
);

const FileText = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M14,2 L6,2 C4.9,2 4,2.9 4,4 L4,20 C4,21.1 4.9,22 6,22 L18,22 C19.1,22 20,21.1 20,20 L20,8 L14,2 Z"/>
    <polyline points="14,2 14,8 20,8"/>
    <line x1="16" y1="13" x2="8" y2="13"/>
    <line x1="16" y1="17" x2="8" y2="17"/>
    <polyline points="10,9 9,9 8,9"/>
  </svg>
);

const ArrowLeft = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <line x1="19" y1="12" x2="5" y2="12"/>
    <polyline points="12,19 5,12 12,5"/>
  </svg>
);

const Eye = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-8-11-8z"/>
    <circle cx="12" cy="12" r="3"/>
  </svg>
);

const Edit = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
    <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
  </svg>
);

const Globe = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
  </svg>
);

const Share = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
    <polyline points="16 6 12 10 8 6"/>
  </svg>
);

const User = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
    <circle cx="12" cy="7" r="4"/>
  </svg>
);

const Settings = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M12 15a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
    <path d="M12 12a6 6 0 1 0 0-12 6 6 0 0 0 0 12z"/>
    <path d="M12 18a9 9 0 1 0 0-18 9 9 0 0 0 0 18z"/>
  </svg>
);

const ChevronLeft = () => (
  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M15 18l-6-6 6-6"/>
  </svg>
);

const Trending = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polyline points="23 6 13.5 15.5 8.5 10.5 1 18"/>
    <polyline points="17 6 23 6 23 12"/>
  </svg>
);

const Clock = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="12" cy="12" r="10"/>
    <polyline points="12 6 12 12 16 14"/>
  </svg>
);

const Stars = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/>
  </svg>
);

const Memories = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M8 2v4"/>
    <path d="M16 2v4"/>
    <rect width="18" height="18" x="3" y="4" rx="2"/>
    <path d="M3 10h18"/>
  </svg>
);

const Grid = () => (
  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <rect width="7" height="7" x="3" y="3" rx="1"/>
    <rect width="7" height="7" x="14" y="3" rx="1"/>
    <rect width="7" height="7" x="3" y="14" rx="1"/>
    <rect width="7" height="7" x="14" y="14" rx="1"/>
  </svg>
);

const Music = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M9 18V5l12-2v13"/>
    <circle cx="6" cy="18" r="3"/>
    <circle cx="18" cy="16" r="3"/>
  </svg>
);

const Video = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polygon points="23 7 16 12 23 17 23 7"/>
    <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
  </svg>
);

const Play = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <polygon points="5 3 19 12 5 21 5 3"/>
  </svg>
);

const Twitter = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"/>
  </svg>
);

const Facebook = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"/>
  </svg>
);

// Add missing icons that are in the reference code
const Share2 = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <circle cx="18" cy="5" r="3"/>
    <circle cx="6" cy="12" r="3"/>
    <circle cx="18" cy="19" r="3"/>
    <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"/>
    <line x1="15.42" y1="6.51" x2="8.59" y2="10.49"/>
  </svg>
);

const Home = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
    <polyline points="9,22 9,12 15,12 15,22"/>
  </svg>
);

const Users = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/>
    <circle cx="9" cy="7" r="4"/>
    <path d="m22 21-3-3"/>
    <circle cx="18" cy="16" r="3"/>
  </svg>
);

const Camera = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"/>
    <circle cx="12" cy="13" r="3"/>
  </svg>
);

const Linkedin = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"/>
    <rect width="4" height="12" x="2" y="9"/>
    <circle cx="4" cy="4" r="2"/>
  </svg>
);

const Lock = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <rect width="18" height="11" x="3" y="11" rx="2" ry="2"/>
    <path d="m7 11V7a5 5 0 0 1 10 0v4"/>
  </svg>
);

const Headphones = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 18 0v7a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3"/>
  </svg>
);

const Mail = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"/>
    <polyline points="22,6 12,13 2,6"/>
  </svg>
);

const MessageSquare = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
  </svg>
);

const Mic = ({ size = 16 }) => (
  <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
    <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"/>
    <path d="M19 10v2a7 7 0 0 1-14 0v-2"/>
    <line x1="12" y1="19" x2="12" y2="23"/>
    <line x1="8" y1="23" x2="16" y2="23"/>
  </svg>
);

const SentimentalApp = () => {
  const [currentView, setCurrentView] = useState('discover');
  const [stories, setStories] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedStory, setSelectedStory] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [activeFilter, setActiveFilter] = useState('all');
  const [isNavVisible, setIsNavVisible] = useState(true);
  const [lastScrollY, setLastScrollY] = useState(0);
  const scrollTimeoutRef = React.useRef(null);
  const [likedStories, setLikedStories] = React.useState(new Set());
  const [currentFormats, setCurrentFormats] = React.useState({});
  const [showCreateForm, setShowCreateForm] = React.useState(false);
  const [newStory, setNewStory] = React.useState({ title: '', content: '', author: 'You' });
  const [isCreating, setIsCreating] = React.useState(false);

  // Chat-related state
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [sessionFocus, setSessionFocus] = useState('');
  const [aiProviders, setAiProviders] = useState({});
  const [selectedAI, setSelectedAI] = useState('gpt4');
  const [userId] = useState(() => `user_${Date.now()}`);

  // Assessment-related state
  const [currentAssessment, setCurrentAssessment] = useState(null);
  const [assessmentProgress, setAssessmentProgress] = useState(0);
  const [assessmentComplete, setAssessmentComplete] = useState(false);
  const [assessmentResult, setAssessmentResult] = useState(null);
  const [showAssessmentResult, setShowAssessmentResult] = useState(false);

  // Space-related state (moved from renderSpace)
  const [selectedAssessment, setSelectedAssessment] = useState(null);
  const [importConversations, setImportConversations] = useState(false);
  const [assessmentResults, setAssessmentResults] = useState(() => {
    // Load saved results from localStorage
    const saved = localStorage.getItem('sentimental-assessment-results');
    return saved ? JSON.parse(saved) : {};
  });
  const [importText, setImportText] = useState('');
  const [isImporting, setIsImporting] = useState(false);

  // Stories-related state (moved from renderStories)
  const [shareModal, setShareModal] = useState(null);
  const [generatingFormat, setGeneratingFormat] = useState(null);

  // Scroll behavior for bottom navigation
  useEffect(() => {
    const controlNavbar = () => {
      const currentScrollY = window.scrollY;
      
      if (currentScrollY > lastScrollY && currentScrollY > 80) {
        // Scrolling down & past threshold
        setIsNavVisible(false);
      } else if (currentScrollY < lastScrollY) {
        // Scrolling up
        setIsNavVisible(true);
      }
      
      setLastScrollY(currentScrollY);
      
      // Clear existing timeout
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
      
      // Show nav after scrolling stops
      scrollTimeoutRef.current = setTimeout(() => {
        setIsNavVisible(true);
      }, 150);
    };

    window.addEventListener('scroll', controlNavbar);
    return () => {
      window.removeEventListener('scroll', controlNavbar);
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current);
      }
    };
  }, [lastScrollY]);

  // API ühendus Flask backend'iga
  useEffect(() => {
    fetchStories();
  }, []);

  // Initialize chat with welcome message
  useEffect(() => {
    // Start with empty chat - no initial message
  }, []);

  // Load AI providers
  useEffect(() => {
    fetch('/api/ai/providers')
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          setAiProviders(data.providers);
          setSelectedAI(data.default);
        }
      })
      .catch(err => console.error('Error loading AI providers:', err));
  }, []);

  // Assessment Functions
  const saveAssessmentResult = (assessmentId, result) => {
    const newResults = {
      ...assessmentResults,
      [assessmentId]: {
        ...result,
        completedAt: new Date().toISOString(),
        id: assessmentId
      }
    };
    setAssessmentResults(newResults);
    localStorage.setItem('sentimental-assessment-results', JSON.stringify(newResults));
  };

  const detectAssessmentCompletion = (message, assessmentType) => {
    // Simple pattern matching for assessment results
    const patterns = {
      'attachment': /attachment style.*?(secure|anxious|avoidant|disorganized)/i,
      'love-language': /love language.*?(words|touch|gifts|acts|quality time)/i,
      'enneagram': /enneagram.*?(type\s*[1-9]|[1-9])/i,
      'emotional-type': /emotional.*?(analytical|expressive|diplomatic|direct)/i,
      'communication-style': /communication.*?(direct|diplomatic|expressive|analytical)/i,
      'stress-response': /stress.*?(fight|flight|freeze|fawn)/i
    };

    const pattern = patterns[assessmentType];
    if (pattern && pattern.test(message)) {
      const match = message.match(pattern);
      if (match) {
        return {
          type: assessmentType,
          result: match[1] || match[0],
          explanation: message,
          confidence: 95
        };
      }
    }
    return null;
  };

  const startAssessmentChat = (assessment) => {
    setCurrentAssessment(assessment);
    setAssessmentProgress(0);
    setAssessmentComplete(false);
    setCurrentView('share');
    
    // Clear previous messages and start assessment
    setMessages([]);
    setInputMessage(`Hey! I want to discover my ${assessment.name.toLowerCase()}. Can you ask me some thoughtful questions to help figure this out? Make it fun and insightful!`);
    
    // Auto-send the message
    setTimeout(() => {
      sendMessage();
    }, 500);
  };

  const completeAssessment = (result) => {
    setAssessmentResult(result);
    setAssessmentComplete(true);
    setShowAssessmentResult(true);
    saveAssessmentResult(currentAssessment.id, result);
  };

  const shareAssessmentResult = async (result, platform) => {
    const shareText = `I just discovered my ${currentAssessment.name}: ${result.result}! ${result.explanation.substring(0, 100)}... Take your own test on Sentimental!`;
    
    if (navigator.share && platform === 'native') {
      try {
        await navigator.share({
          title: `My ${currentAssessment.name} Result`,
          text: shareText,
          url: window.location.href
        });
      } catch (error) {
        console.log('Share cancelled or failed');
      }
    } else {
      // Copy to clipboard
      await navigator.clipboard.writeText(shareText);
      alert('Result copied to clipboard!');
    }
  };

  const fetchStories = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/stories');
      if (response.ok) {
        const data = await response.json();
        console.log('API returned:', data.length, 'stories');
        
        // Use real API data in test environment
        setStories(data);
        console.log('Using real API data from backend');
        
      } else {
        console.error('Failed to fetch stories from API');
        setStories([]);
      }
    } catch (error) {
      console.error('Error fetching stories:', error);
      setStories([]);
    }
    setLoading(false);
  };

  // Story creation
  const createStory = async () => {
    if (!newStory.title.trim() || !newStory.content.trim()) {
      alert('Please fill in both title and content');
      return;
    }

    setIsCreating(true);
    try {
      const response = await fetch('/api/stories', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newStory)
      });

      if (response.ok) {
        const createdStory = await response.json();
        
        // Add to stories list
        setStories(prevStories => [createdStory, ...prevStories]);
        
        // Generate initial formats
        const formatsToGenerate = ['song', 'tweet', 'article', 'video'];
        for (const format of formatsToGenerate) {
          await generateFormat(createdStory.id, format);
        }
        
        // Reset form
        setNewStory({ title: '', content: '', author: 'You' });
        setShowCreateForm(false);
        
        // Refresh stories to get updated format data
        setTimeout(fetchStoriesReal, 1000);
        
        alert('Story created and formats generated!');
      } else {
        alert('Error creating story');
      }
    } catch (error) {
      console.error('Error creating story:', error);
      alert('Error creating story');
    }
    setIsCreating(false);
  };

  // Format generation
  const generateFormat = async (storyId, formatType) => {
    try {
      const response = await fetch(`/api/stories/${storyId}/formats`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ format_type: formatType })
      });

      if (response.ok) {
        const result = await response.json();
        console.log(`Generated ${formatType} for story ${storyId}:`, result);
        return result;
      }
    } catch (error) {
      console.error(`Error generating ${formatType}:`, error);
    }
  };

  // Fetch real stories from API
  const fetchStoriesReal = async () => {
    try {
      const response = await fetch('/api/stories');
      if (response.ok) {
        const data = await response.json();
        console.log('Real API stories:', data);
        setStories(data);
      }
    } catch (error) {
      console.error('Error fetching real stories:', error);
    }
  };

  const useDemoData = () => {
    // Remove all hardcoded mock data - use real stories from API
    fetchStoriesReal();
  };

  const formatIcons = {
    // TIER 1: HIGHEST VIRAL POTENTIAL
    tiktok_script: Video,
    instagram_reel: Camera,
    twitter_thread: Twitter,
    youtube_short: Video,
    
    // TIER 2: HIGH ENGAGEMENT
    instagram_story: Camera,
    tweet: Twitter,
    fb_post: Facebook,
    podcast_segment: Headphones,
    
    // TIER 3: MEDIUM ENGAGEMENT
    linkedin_post: Linkedin,
    newsletter: Mail,
    blog_post: FileText,
    medium_article: FileText,
    
    // TIER 4: NICHE ENGAGEMENT
    reddit_post: MessageSquare,
    text_message: MessageSquare,
    voice_memo: Mic,
    diary_entry: BookOpen,
    
    // TIER 5: CREATIVE FORMATS
    song: Music,
    video: Video,
    article: FileText,
    book_chapter: BookOpen,
    
    // Legacy formats
    reflection: Brain,
    memory: FileText
  };

  const formatColors = {
    song: "bg-pink-100 text-pink-600",
    video: "bg-red-100 text-red-600",
    article: "bg-blue-100 text-blue-600",
    blog_post: "bg-indigo-100 text-indigo-600",
    book_chapter: "bg-green-100 text-green-600",
    diary_entry: "bg-purple-100 text-purple-600",
    tweet: "bg-cyan-100 text-cyan-600",
    twitter_thread: "bg-cyan-100 text-cyan-600",
    fb_post: "bg-blue-100 text-blue-600",
    linkedin_post: "bg-blue-100 text-blue-600",
    reflection: "bg-violet-100 text-violet-600",
    memory: "bg-amber-100 text-amber-600",
    tiktok_script: "bg-gray-100 text-gray-600",
    instagram_reel: "bg-purple-100 text-purple-600",
    youtube_short: "bg-red-100 text-red-600",
    instagram_story: "bg-purple-100 text-purple-600",
    podcast_segment: "bg-purple-100 text-purple-600",
    newsletter: "bg-green-100 text-green-600",
    medium_article: "bg-gray-100 text-gray-600",
    reddit_post: "bg-orange-100 text-orange-600",
    text_message: "bg-gray-100 text-gray-600",
    voice_memo: "bg-yellow-100 text-yellow-600"
  };

  // Search and filter logic
  const filteredStories = React.useMemo(() => {
    let filtered = stories.filter(story => story.public);
    
    // Apply search filter
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(story =>
        story.title.toLowerCase().includes(query) ||
        story.content.toLowerCase().includes(query) ||
        story.author.toLowerCase().includes(query) ||
        (story.cosmic_insights && story.cosmic_insights.some(insight => 
          insight.toLowerCase().includes(query)
        ))
      );
    }
    
    // Apply category filter
    if (activeFilter !== 'all') {
      filtered = filtered.filter(story => {
        switch (activeFilter) {
          case 'trending':
            return story.reactions > 100;
          case 'recent':
            return ['2h ago', '3h ago', '5h ago'].includes(story.timestamp);
          case 'cosmos':
            return story.inCosmos;
          case 'memories':
            return story.format === 'memory';
          case 'reflections':
            return story.format === 'reflection';
          default:
            return true;
        }
      });
    }
    
    return filtered.sort((a, b) => {
      if (activeFilter === 'trending') {
        return b.reactions - a.reactions;
      }
      // Default: newest first
      const timeOrder = { '2h ago': 5, '3h ago': 4, '5h ago': 3, '1 day ago': 2, '4 days ago': 1 };
      return (timeOrder[b.timestamp] || 0) - (timeOrder[a.timestamp] || 0);
    });
  }, [stories, searchQuery, activeFilter]);

  // Like functionality
  const handleLike = async (storyId, event) => {
    if (event) {
      event.stopPropagation();
      event.preventDefault();
    }
    
    const isLiked = likedStories.has(storyId);
    const newLikedStories = new Set(likedStories);
    
    if (isLiked) {
      newLikedStories.delete(storyId);
    } else {
      newLikedStories.add(storyId);
    }
    
    // Optimistic update
    setLikedStories(newLikedStories);
    setStories(prevStories => 
      prevStories.map(story => 
        story.id === storyId 
          ? { ...story, reactions: story.reactions + (isLiked ? -1 : 1) }
          : story
      )
    );

    try {
      // API call would go here
      // await fetch(`/api/stories/${storyId}/like`, { method: 'POST' });
    } catch (error) {
      // Revert on error
      setLikedStories(likedStories);
      setStories(prevStories => 
        prevStories.map(story => 
          story.id === storyId 
            ? { ...story, reactions: story.reactions + (isLiked ? 1 : -1) }
            : story
        )
      );
      console.error('Error liking story:', error);
    }
  };

  // Swipe functionality for formats
  const handleFormatSwipe = (storyId, direction) => {
    const story = stories.find(s => s.id === storyId);
    if (!story || !story.availableFormats || story.availableFormats.length <= 1) return;
    
    const currentIndex = currentFormats[storyId] || 0;
    let newIndex;
    
    if (direction === 'left') {
      newIndex = currentIndex > 0 ? currentIndex - 1 : story.availableFormats.length - 1;
    } else {
      newIndex = currentIndex < story.availableFormats.length - 1 ? currentIndex + 1 : 0;
    }
    
    setCurrentFormats(prev => ({
      ...prev,
      [storyId]: newIndex
    }));
  };

  // Chat functionality
  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage = {
      id: Date.now(),
      content: inputMessage,
      sender: 'You',
      timestamp: new Date().toISOString()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);
    
    const messageToSend = inputMessage;
    setInputMessage('');

    try {
      // Set AI preference before sending message
      await fetch('/api/ai/preference', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: userId,
          provider: selectedAI
        })
      });

      const response = await fetch('/api/chat/message', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: messageToSend,
          user_id: userId
        })
      });

      const data = await response.json();
      
      if (data.success) {
        const botMessage = {
          id: Date.now() + 1,
          content: data.message,
          sender: aiProviders[selectedAI]?.name || 'AI',
          timestamp: new Date().toISOString()
        };
        
        setMessages(prev => [...prev, botMessage]);
        
        if (data.session_focus) {
          setSessionFocus(data.session_focus);
        }
      } else {
        throw new Error(data.error || 'Failed to get response');
      }
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage = {
        id: Date.now() + 1,
        content: "Sorry, I'm having trouble connecting right now. Try again in a moment!",
        sender: 'System',
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const changeAI = (provider) => {
    setSelectedAI(provider);
    // Add a system message about model change
    const changeMessage = {
      id: Date.now(),
      content: `Switched to ${aiProviders[provider]?.name || provider}. ${aiProviders[provider]?.description || ''}`,
      sender: 'System',
      timestamp: new Date().toISOString()
    };
    setMessages(prev => [...prev, changeMessage]);
  };

  const renderDiscover = () => (
    <div className="flex-1 overflow-y-auto p-4">
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">Discover stories</h2>
        <p className="text-gray-600">Explore experiences and creative formats from others</p>
      </div>
      
      <div className="flex gap-2 mb-4 overflow-x-auto">
        {['All', 'Songs', 'Articles', 'Videos', 'Reflections'].map(tag => (
          <button key={tag} className="px-4 py-2 bg-purple-100 text-purple-700 rounded-full whitespace-nowrap text-sm font-medium hover:bg-purple-200 transition-colors">
            {tag}
          </button>
        ))}
      </div>

      <div className="space-y-6">
        {stories.filter(s => s.author !== 'You').map(story => (
          <div key={story.id} className="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
            {/* User info - smaller */}
            <div className="flex items-center gap-3 p-4 pb-2">
              <div className="w-6 h-6 bg-gradient-to-br from-purple-400 to-pink-400 rounded-full flex items-center justify-center">
                <span className="text-white text-xs font-semibold">{story.author?.[0] || 'U'}</span>
              </div>
              <div className="flex-1">
                <p className="text-sm font-medium text-gray-900">{story.author || 'User'}</p>
                <p className="text-xs text-gray-500">{story.timestamp || story.time || '1h ago'}</p>
              </div>
              <div className="flex items-center gap-1 text-gray-400">
                <Eye size={14} />
                <span className="text-xs">{story.views || Math.floor((story.reactions || 0) * 2.3)}</span>
              </div>
            </div>

            {/* Main content area - larger */}
            <div className="px-4 pb-4">
              <h3 className="text-lg font-bold text-gray-900 mb-3">{story.title}</h3>
              
              {/* Featured format display */}
              {story.createdFormats && story.createdFormats.length > 0 ? (
                <div className="mb-4">
                  {/* More realistic format selection - not everyone gets TikTok first */}
                  {(() => {
                    // Determine primary format based on story characteristics and author
                    let primaryFormat = story.createdFormats[0];
                    
                    // Create a deterministic "random" value based on story ID
                    const storyHash = story.id ? story.id.split('').reduce((a, b) => {
                      a = ((a << 5) - a) + b.charCodeAt(0);
                      return a & a;
                    }, 0) : 0;
                    const pseudoRandom = Math.abs(storyHash) / 2147483647; // Normalize to 0-1
                    
                    // More realistic format prioritization based on story characteristics
                    if (story.createdFormats.includes('article') && pseudoRandom > 0.7) {
                      primaryFormat = 'article';
                    } else if (story.createdFormats.includes('tweet') && pseudoRandom > 0.6) {
                      primaryFormat = 'tweet';
                    } else if (story.createdFormats.includes('diary_entry') && pseudoRandom > 0.8) {
                      primaryFormat = 'diary_entry';
                    } else if (story.createdFormats.includes('song') && pseudoRandom > 0.85) {
                      primaryFormat = 'song';
                    } else if (story.createdFormats.includes('video') && pseudoRandom > 0.75) {
                      primaryFormat = 'video';
                    }
                    
                    // Render the selected primary format
                    if (primaryFormat === 'song') {
                      return (
                        <div className="bg-gradient-to-r from-pink-500 to-purple-600 rounded-xl p-4 text-white">
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center gap-2">
                              <Music size={20} />
                              <span className="font-semibold">Generated Song</span>
                            </div>
                            <button className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center hover:bg-white/30 transition-colors">
                              <Play size={16} />
                            </button>
                          </div>
                          <div className="text-sm opacity-90 leading-relaxed">
                            <p className="font-medium mb-1">♪ "Finding My Way Home"</p>
                            <p className="text-xs opacity-75 mb-2">Verse 1:</p>
                            <p className="italic">
                              "Walking through the streets of a city I don't know<br />
                              Every corner holds a story I've yet to show<br />
                              But in this moment of uncertainty..."
                            </p>
                            <div className="mt-2 opacity-60">
                              <p className="text-xs">Click play to hear the full song</p>
                            </div>
                          </div>
                        </div>
                      );
                    }
                    
                    if (primaryFormat === 'video') {
                      return (
                        <div className="bg-gray-900 rounded-xl aspect-video relative overflow-hidden">
                          <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <button className="w-16 h-16 bg-white/90 rounded-full flex items-center justify-center hover:bg-white transition-colors group">
                              <Play size={24} className="text-gray-900 ml-1 group-hover:scale-110 transition-transform" />
                            </button>
                          </div>
                          <div className="absolute bottom-4 left-4 text-white">
                            <p className="font-semibold text-sm">Visual Story: {story.title}</p>
                            <p className="text-xs opacity-75">2:30 • Auto-generated from experience</p>
                          </div>
                        </div>
                      );
                    }
                    
                    if (primaryFormat === 'article') {
                      return (
                        <div className="bg-gray-50 rounded-xl p-4">
                          <div className="flex items-center gap-2 mb-3">
                            <FileText size={16} className="text-blue-600" />
                            <span className="font-semibold text-gray-900">Article</span>
                          </div>
                          <div className="prose prose-sm">
                            <p className="text-gray-700 leading-relaxed">
                              {story.preview || story.content?.substring(0, 150) + '...' || 'The feeling of displacement is something many of us experience when stepping into unfamiliar territory. Whether it\'s a new city, a new job, or a new phase of life, that initial uncertainty can be both overwhelming and exciting.'}
                            </p>
                            <div className="mt-3 text-gray-400 text-sm">
                              <p className="opacity-60">The journey of adaptation teaches us about resilience, growth, and the beauty of embracing...</p>
                            </div>
                          </div>
                        </div>
                      );
                    }
                    
                    if (primaryFormat === 'tweet') {
                      return (
                        <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
                          <div className="flex items-center gap-2 mb-3">
                            <Twitter size={16} className="text-blue-500" />
                            <span className="font-semibold text-gray-900">Tweet Thread</span>
                          </div>
                          <div className="space-y-3">
                            <div className="bg-white rounded-lg p-3 border border-blue-100">
                              <p className="text-gray-800 text-sm">1/ Just moved to a new city and wow, the feeling of starting fresh is both terrifying and exhilarating 🌟</p>
                            </div>
                            <div className="bg-white rounded-lg p-3 border border-blue-100">
                              <p className="text-gray-800 text-sm">2/ Every street corner is a mystery, every café a potential new favorite. The unknown feels like infinite possibility ✨</p>
                            </div>
                            <div className="bg-white/50 rounded-lg p-3 border border-blue-100 opacity-60">
                              <p className="text-gray-600 text-sm">3/ Thread continues... (2 more tweets)</p>
                            </div>
                          </div>
                        </div>
                      );
                    }

                    if (primaryFormat === 'diary_entry') {
                      return (
                        <div className="bg-purple-50 border border-purple-200 rounded-xl p-4">
                          <div className="flex items-center gap-2 mb-3">
                            <BookOpen size={16} className="text-purple-600" />
                            <span className="font-semibold text-gray-900">Diary Entry</span>
                          </div>
                          <div className="bg-white rounded-lg p-3 border border-purple-100 font-handwriting">
                            <p className="text-gray-800 text-sm leading-relaxed italic">
                              {story.preview || story.content?.substring(0, 180) + '...' || `Dear diary, today brought some meaningful reflections...`}
                            </p>
                            <div className="mt-3 text-right text-xs text-purple-600">
                              <p>- {story.author}</p>
                            </div>
                          </div>
                        </div>
                      );
                    }

                    // Default fallback
                    return (
                      <div className="bg-gray-50 rounded-xl p-4">
                        <div className="flex items-center gap-2 mb-3">
                          <FileText size={16} className="text-gray-600" />
                          <span className="font-semibold text-gray-900 capitalize">{primaryFormat.replace('_', ' ')}</span>
                        </div>
                        <p className="text-gray-700 text-sm leading-relaxed">
                          {story.preview || story.content?.substring(0, 200) + '...' || 'This is a story waiting to be explored...'}
                        </p>
                      </div>
                    );
                  })()}
                  
                  {/* Compact "Other formats" section - single line with overflow */}
                  {story.createdFormats && story.createdFormats.length > 1 && (
                    <div className="mt-4">
                      <p className="text-xs font-medium text-gray-500 mb-2">Also available as:</p>
                      <div className="flex gap-2 overflow-x-auto pb-2" style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}>
                        <style jsx>{`
                          div::-webkit-scrollbar {
                            display: none;
                          }
                        `}</style>
                        {story.createdFormats.slice(1, 6).map(format => {
                          const Icon = formatIcons[format] || FileText;
                          const colorClass = formatColors[format] || "bg-gray-100 text-gray-600";
                          return (
                            <button key={format} className={`flex items-center gap-1 px-3 py-1.5 rounded-full text-xs whitespace-nowrap ${colorClass} hover:scale-105 transition-transform`}>
                              <Icon size={12} />
                              <span className="capitalize">{format.replace('_', ' ')}</span>
                            </button>
                          );
                        })}
                        {story.createdFormats.length > 6 && (
                          <div className="flex items-center px-2 text-xs text-gray-400">
                            +{story.createdFormats.length - 6} more...
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                // Always show preview when no specific format display
                <div className="mb-4 p-4 bg-gray-50 rounded-xl">
                  <p className="text-gray-700 text-sm leading-relaxed">
                    {story.preview || story.content?.substring(0, 200) + '...' || 'This is a story waiting to be explored...'}
                  </p>
                </div>
              )}
              
              <button 
                onClick={() => setSelectedStory(story)}
                className="w-full mt-3 py-2 text-purple-600 hover:text-purple-700 text-sm font-medium flex items-center justify-center gap-1 border border-purple-200 rounded-lg hover:bg-purple-50 transition-colors"
              >
                Explore full story <ChevronRight size={14} />
              </button>
              
              {/* Interactive Reaction Bar */}
              <div className="flex items-center justify-between mt-4 pt-3 border-t border-gray-100">
                <div className="flex items-center gap-4">
                  <button 
                    onClick={(e) => handleLike(story.id, e)}
                    className={`flex items-center gap-2 px-3 py-2 rounded-lg transition-all ${
                      likedStories.has(story.id) 
                        ? 'bg-red-50 text-red-600' 
                        : 'text-gray-500 hover:bg-gray-50 hover:text-red-500'
                    }`}
                  >
                    <Heart 
                      size={16} 
                      className={likedStories.has(story.id) ? 'fill-current' : ''} 
                    />
                    <span className="text-sm font-medium">{story.reactions || 0}</span>
                  </button>
                  
                  <button 
                    onClick={() => setSelectedStory(story)}
                    className="flex items-center gap-2 px-3 py-2 rounded-lg text-gray-500 hover:bg-gray-50 hover:text-blue-500 transition-all"
                  >
                    <MessageCircle size={16} />
                    <span className="text-sm font-medium">{Math.floor((story.reactions || 0) * 0.3)}</span>
                  </button>
                  
                  <button 
                    onClick={() => {
                      navigator.share ? 
                        navigator.share({
                          title: story.title,
                          text: story.preview || story.content?.substring(0, 100) + '...',
                          url: window.location.href
                        }) :
                        navigator.clipboard.writeText(`${story.title} - ${window.location.href}`)
                    }}
                    className="flex items-center gap-2 px-3 py-2 rounded-lg text-gray-500 hover:bg-gray-50 hover:text-green-500 transition-all"
                  >
                    <Share2 size={16} />
                  </button>
                </div>
                
                {story.inCosmos && (
                  <div className="flex items-center gap-1 bg-purple-100 text-purple-600 px-2 py-1 rounded-full text-xs font-medium">
                    <Sparkles size={12} />
                    In Cosmos
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderShare = () => (
    <div className="share-container">
      {/* Chat messages area */}
      <div className="chat-messages">
        {messages.length === 0 ? (
          // Welcome screen with conversation starters
          <div className="welcome-screen p-6">
            {/* Welcome Header */}
            <div className="flex items-center gap-3 mb-6">
              <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                <span className="text-white text-lg font-bold">S</span>
              </div>
              <div>
                <h2 className="text-xl font-bold text-gray-900">Sentimental</h2>
              </div>
            </div>

            {/* Welcome Message */}
            <div className="bg-gray-100 rounded-2xl rounded-tl-lg p-4 mb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-3 flex items-center gap-2">
                Welcome to Sentimental <span>✨</span>
              </h3>
              <p className="text-gray-700 leading-relaxed mb-4">
                I'm here to help you understand yourself better through meaningful conversations. This is a safe space where you can explore your thoughts, emotions, and experiences.
              </p>
              
              <p className="text-gray-700 font-medium mb-2">
                Share whatever feels important to you - perhaps:
              </p>
              
              <div className="space-y-1 text-gray-600 text-sm mb-4">
                <p className="italic">Something you've been reflecting on lately</p>
                <p className="italic">An experience that moved you</p>
                <p className="italic">A feeling you've been carrying</p>
                <p className="italic">A moment of insight or growth</p>
                <p className="italic">A pattern you've noticed in your life</p>
                <p className="italic">Something that's been on your heart</p>
              </div>
              
              <p className="text-gray-700">
                When our conversation reveals something meaningful, I can help capture it as a story you can revisit and even transform into different formats to share or reflect on.
              </p>
              
              <p className="text-gray-700 font-medium mt-4">
                What would you like to explore today?
              </p>
            </div>

            {/* Conversation Starter Bubbles */}
            <div className="space-y-3">
              {[
                "I've been feeling something I can't quite put into words...",
                "Something happened recently that I keep thinking about...",
                "I've been reflecting on a relationship in my life...",
                "There's a pattern I've noticed about myself...",
                "I had a moment of realization about...",
                "I'm trying to make sense of why I...",
                "Something about my past keeps coming to mind...",
                "I'm at a crossroads and wondering..."
              ].map((prompt, index) => (
                <button
                  key={index}
                  onClick={() => {
                    setInputMessage(prompt);
                    // Send the message immediately
                    setTimeout(() => {
                      if (!isLoading && prompt.trim()) {
                        const userMessage = {
                          id: Date.now(),
                          content: prompt,
                          sender: 'You',
                          timestamp: new Date().toISOString()
                        };

                        setMessages(prev => [...prev, userMessage]);
                        setIsLoading(true);
                        setInputMessage('');

                        // Send to API
                        fetch('/api/ai/preference', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({
                            user_id: userId,
                            provider: selectedAI
                          })
                        }).then(() => {
                          return fetch('/api/chat/message', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                              message: prompt,
                              user_id: userId
                            })
                          });
                        }).then(response => response.json())
                        .then(data => {
                          if (data.success) {
                            const botMessage = {
                              id: Date.now() + 1,
                              content: data.message,
                              sender: aiProviders[selectedAI]?.name || 'AI',
                              timestamp: new Date().toISOString()
                            };
                            
                            setMessages(prev => [...prev, botMessage]);
                            
                            if (data.session_focus) {
                              setSessionFocus(data.session_focus);
                            }
                          } else {
                            throw new Error(data.error || 'Failed to get response');
                          }
                        }).catch(error => {
                          console.error('Error sending message:', error);
                          const errorMessage = {
                            id: Date.now() + 1,
                            content: "Sorry, I'm having trouble connecting right now. Try again in a moment!",
                            sender: 'System',
                            timestamp: new Date().toISOString()
                          };
                          setMessages(prev => [...prev, errorMessage]);
                        }).finally(() => {
                          setIsLoading(false);
                        });
                      }
                    }, 100);
                  }}
                  className="w-full text-left p-4 bg-gradient-to-r from-purple-100 to-pink-100 border border-purple-200 rounded-2xl hover:from-purple-200 hover:to-pink-200 transition-all duration-200 shadow-sm hover:shadow-md"
                >
                  <span className="text-purple-700 font-medium">{prompt}</span>
                </button>
              ))}
            </div>
          </div>
        ) : (
          // Regular chat messages
          <>
            {messages.map((message) => (
              <div key={message.id} className={`message ${message.sender === 'You' ? 'user-message' : 'ai-message'}`}>
                <div className="message-content">{message.content}</div>
              </div>
            ))}
            {isLoading && (
              <div className="message ai-message">
                <div className="message-content typing-indicator">
                  <span></span><span></span><span></span>
                </div>
              </div>
            )}
          </>
        )}
      </div>
      
      {/* Model selector - only show when there are messages */}
      {messages.length > 0 && (
        <div className="chat-header-minimal">
          <select 
            value={selectedAI} 
            onChange={(e) => changeAI(e.target.value)}
            className="model-dropdown-minimal"
          >
            {Object.entries(aiProviders).map(([key, provider]) => (
              <option key={key} value={key}>
                {provider.name}
              </option>
            ))}
          </select>
        </div>
      )}
      
      {/* Clean input at bottom */}
      <div className="chat-input-container">
        <div className="input-wrapper">
          <textarea
            value={inputMessage}
            onChange={(e) => {
              setInputMessage(e.target.value);
              // Auto-resize textarea
              e.target.style.height = 'auto';
              e.target.style.height = Math.min(e.target.scrollHeight, 120) + 'px';
            }}
            onKeyPress={handleKeyPress}
            placeholder={messages.length === 0 ? "Share what's on your mind and heart..." : "Message Sentimental..."}
            disabled={isLoading}
            className="chat-input auto-resize"
            rows="1"
            style={{
              resize: 'none',
              overflow: 'hidden',
              minHeight: '40px',
              maxHeight: '120px'
            }}
          />
          <button 
            onClick={sendMessage} 
            disabled={isLoading || !inputMessage.trim()}
            className="send-button"
          >
            {isLoading ? '...' : 'Send'}
          </button>
        </div>
      </div>
    </div>
  );

  const renderSpace = () => {
    const viralAssessments = [
      {
        id: 'attachment',
        name: 'Attachment Style',
        category: 'Relationships',
        description: 'Discover if you\'re Secure, Anxious, Avoidant, or Disorganized',
        icon: '💕',
        gradient: 'from-pink-500 to-rose-500',
        trending: true,
        shareRate: 89,
        completionTime: '5 min'
      },
      {
        id: 'love-language',
        name: 'Love Language',
        category: 'Relationships',
        description: 'Words, Touch, Gifts, Acts, or Quality Time?',
        icon: '💖',
        gradient: 'from-red-500 to-pink-500',
        trending: true,
        shareRate: 94,
        completionTime: '4 min'
      },
      {
        id: 'enneagram',
        name: 'Enneagram Type',
        category: 'Personality',
        description: 'Discover your core motivation (1-9)',
        icon: '⭐',
        gradient: 'from-purple-500 to-indigo-500',
        trending: false,
        shareRate: 87,
        completionTime: '8 min'
      },
      {
        id: 'emotional-type',
        name: 'Emotional Intelligence Type',
        category: 'Psychology',
        description: 'How do you process and understand emotions?',
        icon: '🧠',
        gradient: 'from-blue-500 to-cyan-500',
        trending: true,
        shareRate: 82,
        completionTime: '6 min'
      },
      {
        id: 'communication-style',
        name: 'Communication Style',
        category: 'Social',
        description: 'Direct, Diplomatic, Expressive, or Analytical?',
        icon: '💬',
        gradient: 'from-green-500 to-emerald-500',
        trending: false,
        shareRate: 78,
        completionTime: '5 min'
      },
      {
        id: 'stress-response',
        name: 'Stress Response Type',
        category: 'Wellness',
        description: 'Fight, Flight, Freeze, or Fawn?',
        icon: '⚡',
        gradient: 'from-orange-500 to-red-500',
        trending: true,
        shareRate: 85,
        completionTime: '4 min'
      }
    ];

    const userStats = {
      totalConversations: 23,
      insightsCollected: 89,
      storiesCreated: 12,
      assessmentsCompleted: Object.keys(assessmentResults).length,
      shareableResults: 3
    };

    const startAssessment = async (assessment) => {
      setSelectedAssessment(assessment);
      // Navigate to chat with assessment prompt
      setCurrentView('share');
      setInputMessage(`Hey! I want to discover my ${assessment.name.toLowerCase()}. Can you ask me some questions to help figure this out? Make it fun and insightful!`);
    };

    const importChatGPT = async () => {
      setImportConversations(true);
    };

    const handleImport = async () => {
      if (!importText.trim()) {
        alert('Please paste your conversation before importing.');
        return;
      }

      setIsImporting(true);
      try {
        const response = await fetch('/api/import/conversations', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-User-ID': 'user_' + Math.random().toString(36).substr(2, 9)
          },
          body: JSON.stringify({
            conversations: [{
              content: importText,
              title: 'Imported Conversation',
              date: new Date().toISOString(),
              source: 'chatgpt'
            }],
            source: 'chatgpt'
          })
        });

        const result = await response.json();
        
        if (response.ok) {
          alert(`Success! Imported ${result.stories_created} stories and ${result.insights_extracted} insights from your conversation.`);
          setImportConversations(false);
          setImportText('');
          // Refresh stories
          fetchStories();
        } else {
          throw new Error(result.error || 'Import failed');
        }
      } catch (error) {
        console.error('Import error:', error);
        alert('Error importing conversation: ' + error.message);
      } finally {
        setIsImporting(false);
      }
    };

    return (
      <div className="flex-1 overflow-y-auto bg-gradient-to-br from-slate-50 to-purple-50">
        {/* Header Section - Strava Inspired */}
        <div className="bg-gradient-to-br from-purple-600 via-purple-700 to-indigo-800 text-white p-6 pb-8">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-2xl font-bold mb-1">Your Inner Space</h1>
              <p className="text-purple-200 text-sm">Self-discovery dashboard</p>
            </div>
            <div className="text-right">
              <div className="text-2xl font-bold">{userStats.insightsCollected}</div>
              <div className="text-xs text-purple-200">Insights</div>
            </div>
          </div>
          
          {/* Personal Stats Row */}
          <div className="grid grid-cols-4 gap-3 mb-6">
            <div className="text-center">
              <div className="text-lg font-bold">{userStats.totalConversations}</div>
              <div className="text-xs text-purple-200">Chats</div>
            </div>
            <div className="text-center">
              <div className="text-lg font-bold">{userStats.storiesCreated}</div>
              <div className="text-xs text-purple-200">Stories</div>
            </div>
            <div className="text-center">
              <div className="text-lg font-bold">{userStats.assessmentsCompleted}</div>
              <div className="text-xs text-purple-200">Tests</div>
            </div>
            <div className="text-center">
              <div className="text-lg font-bold">{userStats.shareableResults}</div>
              <div className="text-xs text-purple-200">Shared</div>
            </div>
          </div>

          {/* Quick Actions */}
          <div className="flex gap-3">
            <button 
              onClick={importChatGPT}
              className="flex-1 bg-white/20 backdrop-blur-sm rounded-xl px-4 py-3 text-center hover:bg-white/30 transition-all"
            >
              <div className="text-sm font-medium">📁 Import ChatGPT</div>
              <div className="text-xs text-purple-200">Transform conversations</div>
            </button>
            <button 
              onClick={() => setCurrentView('share')}
              className="flex-1 bg-white/20 backdrop-blur-sm rounded-xl px-4 py-3 text-center hover:bg-white/30 transition-all"
            >
              <div className="text-sm font-medium">💭 New Chat</div>
              <div className="text-xs text-purple-200">Start discovery</div>
            </button>
          </div>
        </div>

        <div className="p-4">
          {/* Viral Self-Discovery Section */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold text-gray-900">🔥 Viral Self-Discovery</h2>
              <div className="text-sm text-gray-500">Share & compare with friends</div>
            </div>
            
            <div className="grid grid-cols-1 gap-4">
              {viralAssessments.map(assessment => (
                <div key={assessment.id} className={`bg-gradient-to-br ${assessment.gradient} rounded-2xl p-5 text-white relative overflow-hidden cursor-pointer hover:scale-105 transition-transform`} onClick={() => startAssessment(assessment)}>
                  {assessment.trending && (
                    <div className="absolute top-3 right-3 flex items-center gap-1 bg-white/20 backdrop-blur-sm rounded-full px-2 py-1">
                      <Trending />
                      <span className="text-xs font-medium">Trending</span>
                    </div>
                  )}
                  
                  <div className="flex items-start gap-4">
                    <div className="text-3xl">{assessment.icon}</div>
                    <div className="flex-1">
                      <h3 className="text-lg font-bold mb-1">{assessment.name}</h3>
                      <p className="text-white/90 text-sm mb-3">{assessment.description}</p>
                      
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4 text-xs text-white/80">
                          <div className="flex items-center gap-1">
                            <Clock />
                            <span>{assessment.completionTime}</span>
                          </div>
                          <div className="flex items-center gap-1">
                            <Share2 size={12} />
                            <span>{assessment.shareRate}% share rate</span>
                          </div>
                        </div>
                        <button className="bg-white/20 backdrop-blur-sm rounded-full px-4 py-2 text-sm font-medium hover:bg-white/30 transition-all">
                          Start Test →
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Recent Insights - Strava Style */}
          <div className="mb-8">
            <h2 className="text-xl font-bold text-gray-900 mb-4">📊 Recent Insights</h2>
            <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-5">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900">This Week's Analysis</h3>
                <div className="flex items-center gap-2 text-sm text-gray-500">
                  <Stars />
                  <span>AI Powered</span>
                </div>
              </div>
              
              <div className="space-y-4">
                <div className="p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl border-l-4 border-blue-500">
                  <h4 className="font-medium text-gray-900 mb-1">🎯 Communication Pattern</h4>
                  <p className="text-sm text-gray-700">You tend to ask clarifying questions when feeling uncertain, showing strong emotional intelligence.</p>
                  <div className="mt-2 text-xs text-gray-500">Confidence: 94% • Based on 8 conversations</div>
                </div>
                
                <div className="p-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl border-l-4 border-green-500">
                  <h4 className="font-medium text-gray-900 mb-1">💡 Growth Area</h4>
                  <p className="text-sm text-gray-700">You're becoming more comfortable with uncertainty and ambiguous situations.</p>
                  <div className="mt-2 text-xs text-gray-500">Trend: ↗️ Improving • Last 2 weeks</div>
                </div>
                
                <div className="p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border-l-4 border-purple-500">
                  <h4 className="font-medium text-gray-900 mb-1">🔮 Prediction</h4>
                  <p className="text-sm text-gray-700">You're likely to make a significant decision about work-life balance soon.</p>
                  <div className="mt-2 text-xs text-gray-500">AI Prediction • 78% confidence</div>
                </div>
              </div>
            </div>
          </div>

          {/* Knowledge Domains */}
          <div className="mb-8">
            <h2 className="text-xl font-bold text-gray-900 mb-4">🧠 Knowledge Domains</h2>
            <div className="grid grid-cols-2 gap-3">
              {[
                { domain: "Relationships", insights: 24, confidence: 92, color: "pink" },
                { domain: "Career", insights: 18, confidence: 78, color: "blue" },
                { domain: "Wellness", insights: 31, confidence: 88, color: "green" },
                { domain: "Creativity", insights: 15, confidence: 65, color: "purple" }
              ].map(item => (
                <div key={item.domain} className="bg-white rounded-xl p-4 shadow-sm border border-gray-200">
                  <div className="flex items-center justify-between mb-2">
                    <h3 className="font-medium text-gray-900">{item.domain}</h3>
                    <div className={`w-3 h-3 rounded-full bg-${item.color}-500`}></div>
                  </div>
                  <div className="text-2xl font-bold text-gray-900 mb-1">{item.insights}</div>
                  <div className="text-xs text-gray-500 mb-2">insights collected</div>
                  <div className="flex items-center gap-2">
                    <div className={`flex-1 h-2 bg-gray-200 rounded-full overflow-hidden`}>
                      <div className={`h-full bg-${item.color}-500 rounded-full`} style={{width: `${item.confidence}%`}}></div>
                    </div>
                    <span className="text-xs text-gray-600">{item.confidence}%</span>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Ask About Yourself */}
          <div className="mb-8">
            <h2 className="text-xl font-bold text-gray-900 mb-4">❓ Ask About Yourself</h2>
            <div className="space-y-3">
              {[
                { question: "Why do I procrastinate on important tasks?", category: "Productivity" },
                { question: "How do I behave in relationships?", category: "Relationships" },
                { question: "What are my core values?", category: "Identity" },
                { question: "How do I handle stress?", category: "Wellness" }
              ].map(item => (
                <button key={item.question} className="w-full text-left p-4 bg-white rounded-xl shadow-sm border border-gray-200 hover:shadow-md transition-all group">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-gray-900 mb-1">{item.question}</p>
                      <p className="text-sm text-gray-500">{item.category} • AI will analyze your conversations</p>
                    </div>
                    <ChevronRight className="text-gray-400 group-hover:text-purple-500 transition-colors" />
                  </div>
                </button>
              ))}
              
              <button 
                onClick={() => setCurrentView('share')}
                className="w-full p-4 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl hover:from-purple-700 hover:to-pink-700 transition-all font-medium"
              >
                <div className="flex items-center justify-center gap-2">
                  <Plus size={20} />
                  <span>Ask Your Own Question</span>
                </div>
              </button>
            </div>
          </div>

          {/* Share Your Results */}
          <div className="mb-8">
            <h2 className="text-xl font-bold text-gray-900 mb-4">🔗 Share Your Results</h2>
            <div className="bg-gradient-to-br from-orange-100 to-pink-100 rounded-2xl p-5 border border-orange-200">
              <div className="flex items-center gap-3 mb-3">
                <div className="text-2xl">🎉</div>
                <div>
                  <h3 className="font-bold text-gray-900">Ready to Share!</h3>
                  <p className="text-sm text-gray-600">You have 3 shareable results</p>
                </div>
              </div>
              <p className="text-sm text-gray-700 mb-4">Share your personality insights and see how you compare with friends!</p>
              <div className="flex gap-3">
                <button className="flex-1 bg-white rounded-xl px-4 py-2 text-sm font-medium text-gray-900 hover:bg-gray-50 transition-colors">
                  📱 Share Stories
                </button>
                <button className="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl px-4 py-2 text-sm font-medium hover:from-purple-700 hover:to-pink-700 transition-all">
                  🔥 Share Results
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Import Modal */}
        {importConversations && (
          <div className="fixed inset-0 bg-black/50 flex items-end sm:items-center justify-center z-50 p-4">
            <div className="bg-white rounded-t-3xl sm:rounded-2xl w-full max-w-lg max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-xl font-bold text-gray-900">Import ChatGPT Conversation</h3>
                  <button 
                    onClick={() => setImportConversations(false)}
                    className="p-2 text-gray-500 hover:text-gray-700 transition-colors"
                  >
                    ×
                  </button>
                </div>
                
                <div className="mb-6">
                  <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl p-4 border border-purple-200 mb-4">
                    <h4 className="font-medium text-purple-900 mb-2 flex items-center gap-2">
                      🚀 <span>Revolutionary AI Processing</span>
                    </h4>
                    <p className="text-sm text-purple-700">Our AI will automatically extract insights, create stories, and identify viral sharing opportunities from your conversation!</p>
                  </div>
                  
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Paste your ChatGPT conversation below:
                  </label>
                  <textarea
                    value={importText}
                    onChange={(e) => setImportText(e.target.value)}
                    placeholder="Paste your full conversation here...

Example:
Me: I've been feeling overwhelmed at work lately...
ChatGPT: It sounds like you're dealing with a lot right now...
Me: Yeah, I don't know how to balance everything..."
                    rows={12}
                    className="w-full p-4 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent resize-none text-sm"
                  />
                  <p className="text-xs text-gray-500 mt-2">
                    💡 Tip: Include the full conversation for better insights. We'll automatically detect patterns and create stories.
                  </p>
                </div>
                
                <div className="flex gap-3">
                  <button
                    onClick={() => setImportConversations(false)}
                    className="flex-1 px-4 py-3 border border-gray-200 text-gray-700 rounded-xl hover:bg-gray-50 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={handleImport}
                    disabled={isImporting || !importText.trim()}
                    className="flex-1 px-4 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl hover:from-purple-700 hover:to-pink-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed font-medium"
                  >
                    {isImporting ? (
                      <div className="flex items-center justify-center gap-2">
                        <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        Processing...
                      </div>
                    ) : (
                      '🔮 Extract Magic'
                    )}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  const renderStories = () => {
    const handleShareStory = async (story, formatType) => {
      setGeneratingFormat(formatType);
      try {
        await generateFormat(story.id, formatType);
        // Show success message or open sharing options
        alert(`${formatType} format generated! Ready to share.`);
      } catch (error) {
        console.error('Error generating format:', error);
        alert('Error generating format. Please try again.');
      } finally {
        setGeneratingFormat(null);
        setShareModal(null);
      }
    };

    const shareFormats = [
      { type: 'twitter', name: 'Tweet', icon: Twitter, color: 'bg-blue-500', description: 'Perfect for quick sharing' },
      { type: 'instagram', name: 'Instagram Story', icon: Camera, color: 'bg-pink-500', description: 'Visual story format' },
      { type: 'linkedin', name: 'LinkedIn Post', icon: Linkedin, color: 'bg-blue-600', description: 'Professional sharing' },
      { type: 'song', name: 'Song Lyrics', icon: Music, color: 'bg-purple-500', description: 'Turn into music' },
      { type: 'poem', name: 'Poem', icon: FileText, color: 'bg-indigo-500', description: 'Poetic expression' },
      { type: 'article', name: 'Article', icon: FileText, color: 'bg-green-500', description: 'Long-form content' }
    ];

    return (
      <div className="flex-1 overflow-y-auto bg-gradient-to-br from-slate-50 to-purple-50">
        {/* Enhanced Header */}
        <div className="bg-white border-b border-gray-200 sticky top-0 z-10">
          <div className="p-4">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h1 className="text-2xl font-bold text-gray-900 mb-1">Your Stories</h1>
                <p className="text-gray-600 text-sm">Transform conversations into memorable stories</p>
              </div>
              <div className="text-right">
                <div className="text-xl font-bold text-purple-600">{stories.filter(s => s.author === 'You').length}</div>
                <div className="text-xs text-gray-500">Stories</div>
              </div>
            </div>
            
            {/* Action Buttons */}
            <div className="flex gap-3">
              <button 
                onClick={() => {
                  setCurrentView('share');
                  setInputMessage('I want to create a story about...');
                }}
                className="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl px-4 py-3 font-medium hover:from-purple-700 hover:to-pink-700 transition-all shadow-sm"
              >
                <div className="flex items-center justify-center gap-2">
                  <MessageCircle size={16} />
                  <span>Chat to Create</span>
                </div>
              </button>
              <button 
                onClick={() => setShowCreateForm(true)}
                className="bg-white border border-gray-300 text-gray-700 rounded-xl px-4 py-3 font-medium hover:bg-gray-50 transition-colors"
              >
                <div className="flex items-center gap-2">
                  <Plus size={16} />
                  <span className="hidden sm:inline">Write</span>
                </div>
              </button>
            </div>
          </div>
        </div>

        <div className="p-4">
          {/* Filter Tabs */}
          <div className="flex gap-2 mb-6 overflow-x-auto pb-2">
            {['All', 'Recent', 'Popular', 'Drafts'].map(tab => (
              <button key={tab} className="px-4 py-2 bg-white border border-gray-200 text-gray-700 rounded-full whitespace-nowrap text-sm font-medium hover:bg-purple-50 hover:border-purple-200 hover:text-purple-700 transition-all">
                {tab}
              </button>
            ))}
          </div>

          {/* Stories List */}
          <div className="space-y-4">
            {stories.filter(s => s.author === 'You').map(story => (
              <div key={story.id} className="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-all">
                {/* Story Card Header */}
                <div className="p-5">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <h3 className="text-lg font-bold text-gray-900 mb-2 line-clamp-2">{story.title}</h3>
                      <div className="flex items-center gap-3 text-sm text-gray-500">
                        <span>{story.timestamp || story.time || '1h ago'}</span>
                        <div className="flex items-center gap-1">
                          <Eye size={14} />
                          <span>{story.views || 0}</span>
                        </div>
                        <div className="flex items-center gap-1">
                          <Heart size={14} />
                          <span>{story.reactions || 0}</span>
                        </div>
                      </div>
                    </div>
                    {story.inCosmos && (
                      <div className="flex items-center gap-1 bg-purple-100 text-purple-600 px-2 py-1 rounded-full text-xs font-medium">
                        <Sparkles size={12} />
                        In Cosmos
                      </div>
                    )}
                  </div>
                  
                  {/* Story Preview */}
                  <div className="mb-4 p-4 bg-gray-50 rounded-xl">
                    <p className="text-gray-700 text-sm leading-relaxed line-clamp-3">
                      {story.content?.substring(0, 150) + '...' || 'This is your story preview...'}
                    </p>
                  </div>

                  {/* Available Formats */}
                  {story.createdFormats && story.createdFormats.length > 0 && (
                    <div className="mb-4">
                      <p className="text-xs font-medium text-gray-600 mb-2 flex items-center gap-1">
                        <Grid size={12} />
                        Available formats:
                      </p>
                      <div className="flex flex-wrap gap-2">
                        {story.createdFormats.slice(0, 4).map(format => {
                          const formatIcons = {
                            song: Music,
                            video: Video,
                            article: FileText,
                            blog_post: FileText,
                            book_chapter: BookOpen,
                            diary_entry: BookOpen,
                            tweet: Twitter,
                            fb_post: Facebook,
                            linkedin_post: Linkedin,
                            reflection: Brain,
                            memory: Camera,
                            instagram: Camera,
                            poem: FileText
                          };
                          
                          const formatColors = {
                            song: "bg-pink-100 text-pink-600",
                            video: "bg-red-100 text-red-600",
                            article: "bg-blue-100 text-blue-600",
                            blog_post: "bg-indigo-100 text-indigo-600",
                            book_chapter: "bg-green-100 text-green-600",
                            diary_entry: "bg-purple-100 text-purple-600",
                            tweet: "bg-cyan-100 text-cyan-600",
                            fb_post: "bg-blue-100 text-blue-600",
                            linkedin_post: "bg-blue-100 text-blue-600",
                            reflection: "bg-violet-100 text-violet-600",
                            memory: "bg-amber-100 text-amber-600",
                            instagram: "bg-pink-100 text-pink-600",
                            poem: "bg-purple-100 text-purple-600"
                          };
                          
                          const Icon = formatIcons[format] || FileText;
                          return (
                            <div key={format} className={`flex items-center gap-1 px-3 py-1.5 rounded-full text-xs ${formatColors[format]}`}>
                              <Icon size={12} />
                              <span className="capitalize">{format.replace('_', ' ')}</span>
                            </div>
                          );
                        })}
                        {story.createdFormats.length > 4 && (
                          <div className="text-xs text-gray-500 px-2 py-1">
                            +{story.createdFormats.length - 4} more
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                  
                  {/* Action Buttons */}
                  <div className="flex gap-3">
                    <button 
                      onClick={() => setSelectedStory(story)}
                      className="flex-1 flex items-center justify-center gap-2 py-3 px-4 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors font-medium"
                    >
                      <Eye size={16} />
                      <span>Read</span>
                    </button>
                    <button 
                      onClick={() => console.log('Edit story:', story.id)}
                      className="flex-1 flex items-center justify-center gap-2 py-3 px-4 bg-purple-100 text-purple-700 rounded-xl hover:bg-purple-200 transition-colors font-medium"
                    >
                      <Edit size={16} />
                      <span>Edit</span>
                    </button>
                    <button 
                      onClick={() => setShareModal(story)}
                      className="flex-1 flex items-center justify-center gap-2 py-3 px-4 bg-gradient-to-r from-orange-500 to-pink-500 text-white rounded-xl hover:from-orange-600 hover:to-pink-600 transition-all font-medium shadow-sm"
                    >
                      <Share2 size={16} />
                      <span>Share</span>
                    </button>
                  </div>
                </div>
              </div>
            ))}

            {/* Empty State */}
            {stories.filter(s => s.author === 'You').length === 0 && (
              <div className="text-center py-12">
                <div className="text-6xl mb-4">📖</div>
                <h3 className="text-xl font-bold text-gray-900 mb-2">Start Your Story Journey</h3>
                <p className="text-gray-600 mb-6">Transform your conversations into beautiful, shareable stories</p>
                <div className="flex flex-col gap-3 max-w-sm mx-auto">
                  <button 
                    onClick={() => {
                      setCurrentView('share');
                      setInputMessage('I want to create a story about...');
                    }}
                    className="flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-xl hover:from-purple-700 hover:to-pink-700 transition-all font-medium"
                  >
                    <MessageCircle size={16} />
                    Chat to Create Your First Story
                  </button>
                  <button 
                    onClick={() => setShowCreateForm(true)}
                    className="flex items-center justify-center gap-2 px-6 py-3 bg-white border border-gray-300 text-gray-700 rounded-xl hover:bg-gray-50 transition-colors font-medium"
                  >
                    <Plus size={16} />
                    Write Directly
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Share Modal */}
        {shareModal && (
          <div className="fixed inset-0 bg-black/50 flex items-end sm:items-center justify-center z-50 p-4">
            <div className="bg-white rounded-t-3xl sm:rounded-2xl w-full max-w-md max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-xl font-bold text-gray-900">Share "{shareModal.title}"</h3>
                  <button 
                    onClick={() => setShareModal(null)}
                    className="p-2 text-gray-500 hover:text-gray-700 transition-colors"
                  >
                    ×
                  </button>
                </div>
                
                <p className="text-gray-600 mb-6 text-sm">Choose a format to share your story with the world:</p>
                
                <div className="grid grid-cols-1 gap-3">
                  {shareFormats.map(format => (
                    <button
                      key={format.type}
                      onClick={() => handleShareStory(shareModal, format.type)}
                      disabled={generatingFormat === format.type}
                      className="flex items-center gap-4 p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-all text-left disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <div className={`w-10 h-10 ${format.color} rounded-full flex items-center justify-center text-white`}>
                        <format.icon size={18} />
                      </div>
                      <div className="flex-1">
                        <h4 className="font-medium text-gray-900">{format.name}</h4>
                        <p className="text-sm text-gray-600">{format.description}</p>
                      </div>
                      {generatingFormat === format.type && (
                        <div className="text-sm text-purple-600">Generating...</div>
                      )}
                    </button>
                  ))}
                </div>
                
                <div className="mt-6 p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-200">
                  <h4 className="font-medium text-purple-900 mb-2 flex items-center gap-2">
                    🔥 <span>Viral Tip</span>
                  </h4>
                  <p className="text-sm text-purple-700">Stories with emotional hooks get 5x more shares. Add personal insights or surprising realizations!</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  };

  const renderCreateForm = () => (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold text-gray-900">Create New Story</h2>
            <button 
              onClick={() => setShowCreateForm(false)}
              className="p-2 text-gray-500 hover:text-gray-700 transition-colors"
            >
              ×
            </button>
          </div>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Title</label>
              <input
                type="text"
                value={newStory.title}
                onChange={(e) => setNewStory({...newStory, title: e.target.value})}
                placeholder="What's your story about?"
                className="w-full p-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Your Story</label>
              <textarea
                value={newStory.content}
                onChange={(e) => setNewStory({...newStory, content: e.target.value})}
                placeholder="Share your thoughts, experiences, or feelings..."
                rows={8}
                className="w-full p-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent resize-none"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Author</label>
              <input
                type="text"
                value={newStory.author}
                onChange={(e) => setNewStory({...newStory, author: e.target.value})}
                className="w-full p-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              />
            </div>
          </div>
          
          <div className="flex gap-3 mt-6">
            <button
              onClick={() => setShowCreateForm(false)}
              className="flex-1 px-4 py-3 border border-gray-200 text-gray-700 rounded-xl hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={createStory}
              disabled={isCreating}
              className="flex-1 px-4 py-3 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isCreating ? 'Creating...' : 'Create Story'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderStoryDetail = (story) => (
    <div className="flex-1 overflow-y-auto">
      {/* Beautiful Header with Back Button */}
      <div className="bg-white border-b border-gray-200 p-4 sticky top-0 z-10">
        <button 
          onClick={() => setSelectedStory(null)}
          className="flex items-center gap-2 text-purple-600 hover:text-purple-700 mb-4 transition-colors"
        >
          <ArrowLeft size={20} />
          <span className="font-medium">Back to Stories</span>
        </button>
        
        <div className="mb-4">
          <h1 className="text-2xl font-bold text-gray-900 mb-3 leading-tight">{story.title}</h1>
          
          {/* Story Meta Info */}
          <div className="flex items-center gap-4 text-sm text-gray-600">
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 bg-gradient-to-br from-purple-400 to-pink-400 rounded-full flex items-center justify-center">
                <span className="text-white text-sm font-semibold">{story.author?.[0] || 'U'}</span>
              </div>
              <span className="font-medium">{story.author}</span>
            </div>
            <span>•</span>
            <span>{story.timestamp || story.time || '1h ago'}</span>
            {story.reactions && (
              <>
                <span>•</span>
                <div className="flex items-center gap-1">
                  <Heart size={14} />
                  <span>{story.reactions}</span>
                </div>
              </>
            )}
          </div>
        </div>
      </div>

      <div className="p-4">
        {/* GENERATED FORMATS SECTION - MOVED TO TOP */}
        {story.createdFormats && story.createdFormats.length > 0 && (
          <div className="generated-formats-section" style={{ marginBottom: '1.5rem', padding: '1rem', backgroundColor: '#f8f9fa', borderRadius: '8px', border: '1px solid #e9ecef' }}>
            <h3 style={{ marginBottom: '0.75rem', color: '#2c3e50', fontSize: '1.1rem', fontWeight: '600', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
              <Grid size={18} />
              Available Formats
            </h3>
            <div className="flex gap-2 overflow-x-auto pb-2" style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}>
              <style jsx>{`
                div::-webkit-scrollbar {
                  display: none;
                }
              `}</style>
              {story.createdFormats.slice(0, 6).map((format, index) => {
                const Icon = formatIcons[format] || FileText;
                const colorClass = formatColors[format] || "bg-gray-100 text-gray-600";
                              
                return (
                  <button
                    key={index}
                    onClick={() => {
                      const formatElement = document.getElementById(`format-${format}`);
                      if (formatElement) {
                        formatElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                      }
                    }}
                    className={`flex items-center gap-1 px-3 py-1.5 rounded-full text-xs whitespace-nowrap ${colorClass} hover:scale-105 transition-transform`}
                  >
                    <Icon size={12} />
                    <span className="capitalize">{format.replace('_', ' ')}</span>
                  </button>
                );
              })}
              {story.createdFormats.length > 6 && (
                <div className="flex items-center px-2 text-xs text-gray-400">
                  +{story.createdFormats.length - 6} more...
                </div>
              )}
            </div>
            <p style={{ marginTop: '0.5rem', fontSize: '0.8rem', color: '#6c757d', display: 'flex', alignItems: 'center', gap: '0.25rem' }}>
              <Eye size={12} />
              Click any format above to jump to that section below
            </p>
          </div>
        )}

        {/* Story Content */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Story</h3>
          <div className="prose prose-gray max-w-none">
            <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">{story.content}</p>
          </div>
        </div>

        {/* GENERATED FORMATS DISPLAY */}
        {story.formatsGenerated && Object.keys(story.formatsGenerated).length > 0 && (
          <div className="formats-display">
            <h3>Generated Formats</h3>
            {Object.entries(story.formatsGenerated).map(([formatType, content]) => {
              const Icon = formatIcons[formatType] || FileText;
              
              return (
                <div key={formatType} id={`format-${formatType}`} className="format-content" style={{ marginBottom: '2rem', padding: '1.5rem', backgroundColor: '#f8f9fa', borderRadius: '8px', border: '1px solid #dee2e6' }}>
                  <h4 style={{ marginBottom: '1rem', color: '#2c3e50', textTransform: 'capitalize', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                    <Icon size={20} />
                    {formatType.replace('_', ' ')}
                  </h4>
                  <pre style={{ whiteSpace: 'pre-wrap', fontFamily: 'inherit', margin: 0, lineHeight: '1.6' }}>{content}</pre>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );

  const renderActiveView = () => {
    if (selectedStory) {
      return renderStoryDetail(selectedStory);
    }
    
    switch(currentView) {
      case 'discover': return renderDiscover();
      case 'stories': return renderStories();
      case 'share': return renderShare();
      case 'space': return renderSpace();
      default: return renderDiscover();
    }
  };

  return (
    <div className="max-w-lg mx-auto bg-gray-50 min-h-screen relative">
      {/* Header */}
      <div className="bg-white shadow-sm border-b border-gray-200 p-4 sticky top-0 z-40">
        <div className="flex items-center justify-between">
          <h1 className="text-xl font-bold text-gray-900">SentimentalApp</h1>
          <div className="flex items-center gap-3">
            <button className="p-2 text-gray-600 hover:text-gray-900 transition-colors">
              <User size={20} />
            </button>
            <button className="p-2 text-gray-600 hover:text-gray-900 transition-colors">
              <Settings size={20} />
            </button>
          </div>
        </div>
      </div>

      {/* Main Content with bottom padding for navigation */}
      <div className="pb-20">
        <div className="p-4">
          {renderActiveView()}
        </div>
      </div>

      {/* Bottom Navigation */}
      {!selectedStory && (
        <div className={`fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-2 py-2 transition-transform duration-300 ease-in-out z-50 ${
          isNavVisible ? 'translate-y-0' : 'translate-y-full'
        }`}>
          <div className="flex justify-around">
            {[
              { id: 'discover', icon: Compass, label: 'Discover' },
              { id: 'stories', icon: BookOpen, label: 'Stories' },
              { id: 'share', icon: MessageCircle, label: 'Share' },
              { id: 'space', icon: Sparkles, label: 'Space' }
            ].map(({ id, icon: Icon, label }) => (
              <button
                key={id}
                onClick={() => setCurrentView(id)}
                className={`flex flex-col items-center gap-1 py-2 px-4 rounded-xl transition-all ${
                  currentView === id 
                    ? 'bg-purple-100 text-purple-600' 
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                <Icon />
                <span className="text-xs font-medium">{label}</span>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Story Creation Form Modal */}
      {showCreateForm && renderCreateForm()}
    </div>
  );
};

// Make it available globally for HTML to use
window.SentimentalApp = SentimentalApp;